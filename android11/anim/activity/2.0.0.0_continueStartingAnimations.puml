@startuml
'https://plantuml.com/sequence-diagram

autonumber

AppTransitionController.java -> SurfaceAnimationRunner.java: continueStartingAnimations()
activate SurfaceAnimationRunner.java

note right
    reset mAnimationStartDeferred

    void continueStartingAnimations() {
        synchronized (mLock) {
            mAnimationStartDeferred = false;
            if (!mPendingAnimations.isEmpty()) {
                mChoreographer.postFrameCallback(this::startAnimations);
            }
        }
    }
end note

SurfaceAnimationRunner.java-> Choreographer.java:postFrameCallback(::startAnimations())
activate Choreographer.java
deactivate Choreographer.java
deactivate SurfaceAnimationRunner.java

-> SurfaceAnimationRunner.java :startAnimations()
activate SurfaceAnimationRunner.java

SurfaceAnimationRunner.java-> SurfaceAnimationRunner.java :startPendingAnimationsLocked()
activate SurfaceAnimationRunner.java
SurfaceAnimationRunner.java-> SurfaceAnimationRunner.java :startAnimationLocked()
activate SurfaceAnimationRunner.java

SurfaceAnimationRunner.java -> SfValueAnimator.java: new(0,1)
activate SfValueAnimator.java
deactivate SfValueAnimator.java
SurfaceAnimationRunner.java -> SfValueAnimator.java :start()
activate SfValueAnimator.java
deactivate SfValueAnimator.java
deactivate SurfaceAnimationRunner.java
deactivate SurfaceAnimationRunner.java
deactivate SurfaceAnimationRunner.java
deactivate SurfaceAnimationRunner.java

ValueAnimator.java -> AnimatorUpdateListener.java:onAnimationUpdate()
activate AnimatorUpdateListener.java
note left
listen SfValueAnimator from 0 to 1
end note
AnimatorUpdateListener.java -> SurfaceAnimationRunner.java:applyTransformation()
activate SurfaceAnimationRunner.java
note left
2.2.0.0_applyAnimation.puml
end note
@enduml