@startuml

box "WMS"
participant Session.java
participant WindowManagerService.java
participant WindowToken.java
participant WindowState.java
participant SurfaceAnimator.java
participant DisplayContent.java
participant DisplayAreaPolicy.java
participant "DisplayArea$Tokens.java"
end box

Session.java -> WindowManagerService.java: addWindow()
activate WindowManagerService.java

note right
token value = ï¼Ÿ
attrs.token != null ? attrs.token : client.asBinder();
client = IWindow
end note
WindowManagerService.java -> WindowToken.java: new(token...)
activate WindowToken.java

WindowToken.java -> SurfaceAnimator.java: new()
activate SurfaceAnimator.java
deactivate SurfaceAnimator.java
WindowToken.java -> DisplayContent.java: addWindowToken(WindowToken)
activate DisplayContent.java
DisplayContent.java -> DisplayAreaPolicy.java: addWindow()
activate DisplayAreaPolicy.java
DisplayAreaPolicy.java -> DisplayAreaPolicy.java: findAreaForToken()
activate DisplayAreaPolicy.java
deactivate DisplayAreaPolicy.java
DisplayAreaPolicy.java -> "DisplayArea$Tokens.java": addChild()
activate "DisplayArea$Tokens.java"
deactivate "DisplayArea$Tokens.java"
deactivate DisplayAreaPolicy.java
deactivate DisplayContent.java
deactivate WindowToken.java
note left
AddWindow_2.1.3.0.puml
end note



WindowManagerService.java -> WindowState.java: attach()
activate WindowState.java
deactivate WindowState.java
note left:AddWindow_2.1.1.0.puml

WindowManagerService.java -> WindowManagerService.java: mWindowMap.put(IWindow, (windowState))
activate WindowManagerService.java
deactivate WindowManagerService.java
note left
save IWindow-windowState
for match client&windowState
such as: process died to
remove windowState
end note

WindowManagerService.java -> WindowToken.java: addWindow(windowState)
activate WindowToken.java
deactivate WindowToken.java
deactivate WindowManagerService.java
note left:AddWindow_2.1.3.0.puml



@enduml